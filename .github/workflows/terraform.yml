name: terraform-multicloud

on:
  pull_request:
    paths:
      - '**.tf'
      - '.github/workflows/terraform.yml'
      - 'scripts/**'
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      - '.github/workflows/terraform.yml'
      - 'scripts/**'

permissions:
  id-token: write   # Needed for OIDC
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      # For workload identity (preferred), use federated credentials instead of client secret; omit secret.
      AWS_REGION: us-east-1
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
      # Optional toggles; override in PR via workflow dispatch if desired
      ENABLE_AZURE: true
      ENABLE_AWS: true
      ENABLE_GCP: true
  ENABLE_LINODE: true
  BOOTSTRAP_KIND: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Azure OIDC Login
        uses: azure/login@v2
        if: env.ENABLE_AZURE == 'true'
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}

      - name: Configure AWS credentials (OIDC)
        if: env.ENABLE_AWS == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: GCP Auth (Workload Identity Federation)
        if: env.ENABLE_GCP == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up gcloud
        if: env.ENABLE_GCP == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}

      - name: Install clusterctl
        run: |
          curl -L https://github.com/kubernetes-sigs/cluster-api/releases/latest/download/clusterctl-linux-amd64 -o clusterctl
          chmod +x clusterctl
          sudo mv clusterctl /usr/local/bin/

      - name: Terraform Init
        run: terraform init -input=false

      - name: Create kind cluster (if requested)
        if: env.BOOTSTRAP_KIND == 'true'
        uses: helm/kind-action@v1
        with:
          cluster_name: capi-mgmt

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -out=tfplan \
            -var="enable_azure=${{ env.ENABLE_AZURE }}" \
            -var="enable_aws=${{ env.ENABLE_AWS }}" \
            -var="enable_gcp=${{ env.ENABLE_GCP }}" \
            -var="enable_linode=${{ env.ENABLE_LINODE }}" \
            -var="bootstrap_kind=${{ env.BOOTSTRAP_KIND }}"

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      - name: PR Comment with Plan
        if: github.event_name == 'pull_request'
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            Terraform plan output:
            ```
            ${{ steps.plan.outputs.stdout }}
            ```

  apply:
    needs: terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      TF_IN_AUTOMATION: true
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AWS_REGION: us-east-1
      LINODE_TOKEN: ${{ secrets.LINODE_TOKEN }}
      GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
      ENABLE_AZURE: true
      ENABLE_AWS: true
      ENABLE_GCP: true
  ENABLE_LINODE: true
  BOOTSTRAP_KIND: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
      - name: Azure OIDC Login
        uses: azure/login@v2
        if: env.ENABLE_AZURE == 'true'
        with:
          client-id: ${{ env.ARM_CLIENT_ID }}
          tenant-id: ${{ env.ARM_TENANT_ID }}
          subscription-id: ${{ env.ARM_SUBSCRIPTION_ID }}
      - name: Configure AWS credentials (OIDC)
        if: env.ENABLE_AWS == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: GCP Auth (Workload Identity Federation)
        if: env.ENABLE_GCP == 'true'
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
      - name: Set up gcloud
        if: env.ENABLE_GCP == 'true'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT }}
      - name: Install clusterctl
        run: |
          curl -L https://github.com/kubernetes-sigs/cluster-api/releases/latest/download/clusterctl-linux-amd64 -o clusterctl
          chmod +x clusterctl
          sudo mv clusterctl /usr/local/bin/

      - name: Terraform Init
        run: terraform init -input=false

      - name: Create kind cluster (if requested)
        if: env.BOOTSTRAP_KIND == 'true'
        uses: helm/kind-action@v1
        with:
          cluster_name: capi-mgmt
      - name: Download Plan (optional consistency)
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .
        continue-on-error: true
      - name: Terraform Apply
        run: |
          if [ -f tfplan ]; then
            terraform apply -input=false -auto-approve tfplan
          else
            terraform apply -input=false -auto-approve \
              -var="enable_azure=${{ env.ENABLE_AZURE }}" \
              -var="enable_aws=${{ env.ENABLE_AWS }}" \
              -var="enable_gcp=${{ env.ENABLE_GCP }}" \
              -var="enable_linode=${{ env.ENABLE_LINODE }}" \
              -var="bootstrap_kind=${{ env.BOOTSTRAP_KIND }}"
          fi
